import java.awt.Graphics;

import javax.swing.JFrame;

public class Ventana extends JFrame implements Matriz{
	
	public static int ESCALA = 20;

	@Override
	public void paint(Graphics g) {
		g.drawLine(convertirPuntoX(-100), convertirPuntoY(0), 
				convertirPuntoX(100), convertirPuntoY(0));
		g.drawLine(convertirPuntoX(0), convertirPuntoY(100), 
				convertirPuntoX(0), convertirPuntoY(-100));
		
	// Dibucar el poligono
		g.drawLine((convertirPuntoX(2)), (convertirPuntoY(1)), 
				(convertirPuntoX(4)), (convertirPuntoY(5)));
		
		g.drawLine((convertirPuntoX(4)), (convertirPuntoY(5)), 
				(convertirPuntoX(6)), (convertirPuntoY(1)));
		
		g.drawLine((convertirPuntoX(6)), (convertirPuntoY(1)), 
				(convertirPuntoX(4)), (convertirPuntoY(2)));
		
		g.drawLine((convertirPuntoX(4)), (convertirPuntoY(2)), 
				(convertirPuntoX(2)), (convertirPuntoY(1)));
		
	// Declarar puntos iniciales
		double[] puntoInicial1 = new double[4];
		puntoInicial1[0] = 2;
		puntoInicial1[1] = 1;
		puntoInicial1[2] = 4;
		puntoInicial1[3] = 5;
		
		double[] puntoInicial2 = new double[4];
		puntoInicial2[0] = 4;
		puntoInicial2[1] = 5;
		puntoInicial2[2] = 6;
		puntoInicial2[3] = 1;
		
		double[] puntoInicial3 = new double[4];
		puntoInicial3[0] = 6;
		puntoInicial3[1] = 1;
		puntoInicial3[2] = 4;
		puntoInicial3[3] = 2;
		
		double[] puntoInicial4 = new double[4];
		puntoInicial4[0] = 4;
		puntoInicial4[1] = 2;
		puntoInicial4[2] = 2;
		puntoInicial4[3] = 1;
	
	// declarar matrices de traslacion
		double[] matrizSegundoCuadrante = {-1, 1}; 
		
	// Dibujar poligono en segundo cuadrante
		
		double[] puntoSegundoCuadrante1= trasladar(puntoInicial1, 
				matrizSegundoCuadrante);
		g.drawLine(convertirPuntoX(puntoSegundoCuadrante[0]), convertirPuntoY(puntoSegundoCuadrante[1]),
				convertirPuntoX(puntoSegundoCuadrante[2]), convertirPuntoY(puntoSegundoCuadrante[3]));
	}
	
	private int convertirPuntoX(int x) {
		int centro = this.getWidth() / 2;
		return centro + x * ESCALA;
	}
	
	private int convertirPuntoY(int y) {
		int centro = this.getHeight() / 2;
		return centro - y * ESCALA;
	}

	@Override
	public double[] trasladar(double[] puntoInicial, double[] vectorTraslacion) {
		
		return null;
	}
}
