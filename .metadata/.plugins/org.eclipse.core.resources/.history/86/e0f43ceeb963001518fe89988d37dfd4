import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JFrame;

public class Ventana extends JFrame {

	public static int ESCALA = 20;
	public static double[] matrizSegundoCuadrante = { -8, 0, -8, 0 };
	public static double[] matrizTercerCuadrante = { -8, -10, -8, -10 };
	public static double[] matrizCuartoCuadrante = { 0, -10, 0, -10 };

	@Override
	public void paint(Graphics g) {

		MatrizImpl operaciones = new MatrizImpl();

		// Dibujar plano cartesiano
		/*
		 * g.drawLine(convertirPuntoX(-100), convertirPuntoY(0),
		 * convertirPuntoX(100), convertirPuntoY(0));
		 * g.drawLine(convertirPuntoX(0), convertirPuntoY(100),
		 * convertirPuntoX(0), convertirPuntoY(-100));
		 */

		
		// Declarar puntos iniciales
		double[] puntoInicialA = { -6, 0 };
		double[] puntoInicialB = { -2, 0 };
		double[] puntoInicialC = { -1, 2 };
		double[] puntoInicialD = { -2, 4 };
		double[] puntoInicialE = { -6, 4 };
		double[] puntoInicialF = { -7, 2 };
		
		double[] puntoEscaladoB = null;
		double[] puntoEscaladoC = null;
		double[] puntoEscaladoD = null;

		// Dibujar el poligono

		g.setColor(Color.RED);
		
		g.drawLine(convertirPuntoX(puntoInicialA[0]), convertirPuntoY(puntoInicialA[1]), 
				convertirPuntoX(puntoInicialB[0]), convertirPuntoY(puntoInicialB[1]));
		g.drawLine(convertirPuntoX(puntoInicialB[0]), convertirPuntoY(puntoInicialB[1]), 
				convertirPuntoX(puntoInicialC[0]), convertirPuntoY(puntoInicialC[1]));
		g.drawLine(convertirPuntoX(puntoInicialC[0]), convertirPuntoY(puntoInicialC[1]), 
				convertirPuntoX(puntoInicialD[0]), convertirPuntoY(puntoInicialD[1]));
		g.drawLine(convertirPuntoX(puntoInicialD[0]), convertirPuntoY(puntoInicialD[1]), 
				convertirPuntoX(puntoInicialE[0]), convertirPuntoY(puntoInicialE[1]));
		g.drawLine(convertirPuntoX(puntoInicialE[0]), convertirPuntoY(puntoInicialE[1]), 
				convertirPuntoX(puntoInicialF[0]), convertirPuntoY(puntoInicialF[1]));
		g.drawLine(convertirPuntoX(puntoInicialF[0]), convertirPuntoY(puntoInicialF[1]), 
				convertirPuntoX(puntoInicialA[0]), convertirPuntoY(puntoInicialA[1]));

	}

	private int convertirPuntoX(double x) {
		double centro = this.getWidth() / 2.0;
		return (int) (centro + x * ESCALA);
	}

	private int convertirPuntoY(double y) {
		double centro = this.getHeight() / 2.0;
		return (int) (centro - y * ESCALA);
	}

}
